@page "/"
@using System.Text.Json
@using Azure.Identity
@using Microsoft.Azure.Cosmos
@using MoreFairStats.Components
@inject Database dataBase
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<form @onsubmit="() => { return; }">
    <div class="input-group" style="width:25rem;">
        <span class="input-group-text border-warning" style="background-color:#10141f; color:#e7d5b3">View stats for round number</span>
        <input type="number" class="form-control border-warning" @bind="RoundNumber" @bind:event="oninput"/>
        <button type="button" class="btn btn-outline-warning" @onclick="(() => RoundNumber--)">&#8722;</button>
        <button type="button" class="btn btn-outline-warning" @onclick="(() => RoundNumber++)">&#43;</button>
    </div>
</form>
<br>

@if(roundStats != null)
{
    <div class="card border border-warning" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card-body">
            <h3 class="card-title">Stats for round @roundStats.Number</h3>
        </div>
    </div>
    <div class="card-group" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round info</div>
            <div class="card-body">
                <p>Base points: <b>@Int64.Parse(roundStats.BasePointsToPromote!).ToString("N0")</b></p>
                <p class="card-text">Round types: @string.Join(", ", roundStats.RoundTypes!)</p>
            </div>
        </div>
            <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round start</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round ending</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
    </div>
    <br>

    @if(ladderStats != null)
    {
        <RankersTable roundStats="@roundStats" ladderStats="@ladderStats" OnLadderClickCallback="@updateLadderNumber" ></RankersTable>
    }
}


@code{
    private int currentMaxRound => int.Parse(Configuration["currentMaxRound"]!);

    private int _roundNumber;

    private int RoundNumber 
    { 
        get => _roundNumber;
        set 
        { 
            _roundNumber = value < 1 ? 1 : (value > currentMaxRound ? currentMaxRound : value);
            updateRoundNumber();
        }
    }

    private RoundStats? roundStats;

    private LadderStats? ladderStats;


    protected override void OnInitialized()
    {
        RoundNumber = currentMaxRound;
    }

    private void updateRoundNumber()
    {
        parseRoundStats(RoundNumber);
        ladderStats = parseLadderStats(RoundNumber, roundStats!.NumberOfLadders); //Always use the last ladder, which has the same number as the count
        StateHasChanged();
    }

    private void updateLadderNumber(string ladderNum)
    {
        var intLadderNum = Int32.Parse(ladderNum);
        ladderStats = parseLadderStats(RoundNumber, intLadderNum);
        StateHasChanged();
    }

    private void parseRoundStats(int round)
    {
        var container = dataBase.GetContainer("mfs-rounds");
        var asyncResp = container.ReadItemAsync<RoundStats>(round.ToString(), new PartitionKey(round));
        asyncResp.Wait();
        var respItem = asyncResp.Result;
        roundStats = respItem.Resource;
    }

    private LadderStats parseLadderStats(int round, int ladder)
    {
        var container = dataBase.GetContainer("mfs-ladders");
        var asyncResp = container.ReadItemAsync<LadderStats>($"R{round}L{ladder}", new PartitionKey(round));
        asyncResp.Wait();
        var respItem = asyncResp.Result;
        return respItem.Resource;
    }
}