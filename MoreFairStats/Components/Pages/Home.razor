@page "/"
@using System.Text.Json
@using Azure.Identity
@using Microsoft.Azure.Cosmos
@using MoreFairStats.Components
@inject MoreFairData moreFairData

<PageTitle>Home</PageTitle>

<form @onsubmit="() => { return; }">
    <div class="input-group" style="width:25rem;">
        <span class="input-group-text border-warning" style="background-color:#10141f; color:#e7d5b3">View stats for round number</span>
        <input type="number" class="form-control border-warning" @bind:get="RoundNumber" @bind:set="SetRoundNumber" @bind:event="oninput" />
        <button type="button" class="btn btn-outline-warning" @onclick="(() => SetRoundNumber(RoundNumber - 1))">&#8722;</button>
        <button type="button" class="btn btn-outline-warning" @onclick="(() => SetRoundNumber(RoundNumber + 1))">&#43;</button>
    </div>
</form>
<br>

@if(roundStats != null)
{
    <div class="card border border-warning" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card-body">
            <h3 class="card-title">Stats for round @roundStats.Number</h3>
        </div>
    </div>
    <div class="card-group" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round info</div>
            <div class="card-body">
                <p>Base points: <b>@Int64.Parse(roundStats.BasePointsToPromote!).ToString("N0")</b></p>
                <p class="card-text">Round types: @string.Join(", ", roundStats.RoundTypes!)</p>
            </div>
        </div>
            <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round start</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round ending</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
    </div>
    <br>

    @if(ladderStats != null)
    {
        <RankersTable roundStats="@roundStats" ladderStats="@ladderStats" OnLadderClickCallback="@updateLadderNumber" ></RankersTable>
    }
}


@code{
    private async Task<int> getCurrentMaxRound()
    {
        return (await moreFairData.GetConfig()).CurrentMaxRound;
    }

    private int _roundNumber;

    private int RoundNumber 
    { 
        get => _roundNumber;
    }
    private async Task SetRoundNumber(int newRoundNumber)
    {
        var currentMaxRound = await getCurrentMaxRound();;
        _roundNumber = newRoundNumber < 1 ? 1 : (newRoundNumber > currentMaxRound ? currentMaxRound : newRoundNumber);
        await updateRoundNumber();
    }

    private RoundStats? roundStats;

    private LadderStats? ladderStats;


    protected override async Task OnInitializedAsync()
    {
        var currentMaxRound = await getCurrentMaxRound();
        await SetRoundNumber(currentMaxRound);
    }

    private async Task updateRoundNumber()
    {
        await parseRoundStats(RoundNumber);
        ladderStats = await parseLadderStats(RoundNumber, roundStats!.NumberOfLadders); //Always use the last ladder, which has the same number as the count
        StateHasChanged();
    }

    private async Task updateLadderNumber(string ladderNum)
    {
        var intLadderNum = Int32.Parse(ladderNum);
        ladderStats = await parseLadderStats(RoundNumber, intLadderNum);
        StateHasChanged();
    }

    private async Task parseRoundStats(int round)
    {
        roundStats = await moreFairData.GetRound(round);
    }

    private async Task<LadderStats> parseLadderStats(int round, int ladder)
    {
        var ladderStats = await moreFairData.GetLadder(round, ladder);
        var queryString = $"SELECT * FROM c WHERE c.Round = {round} AND c.Ladder = {ladder}";
        var queryDef = new QueryDefinition(queryString);
        using var queryIter = moreFairData.GetLadderRankersQueryIterator(queryDef);
        var allResults = new List<FeedResponse<LadderRanker>>();
        var result = await queryIter.ReadNextAsync();
        var allIds = new List<string>();
        foreach (var ladderRanker in result)
        {
            var ranker = new Ranker()
            {
                AccountId = ladderRanker.AccountId,
                AutoPromote = ladderRanker.AutoPromote,
                Bias = ladderRanker.Bias,
                Grapes = ladderRanker.Grapes,
                Growing = ladderRanker.Growing,
                Multi = ladderRanker.Multi,
                Points = ladderRanker.Points,
                Power = ladderRanker.Power,
                Rank = ladderRanker.Rank,
                Vinegar = ladderRanker.Vinegar
            };
            ladderStats.Rankers!.Add(ranker);
            allIds.Add(ranker.AccountId.ToString());
        }
        var testPlayers = await moreFairData.GetManyPlayers(allIds);
        foreach (var player in testPlayers)
        {
            var ranker = ladderStats.Rankers!.Find(lr => lr.AccountId.ToString() == player.id)!;
            ranker.AssholePoints = player.AHPoints;
            ranker.UserName = player.UserName;
        }
        return ladderStats;
    }
}