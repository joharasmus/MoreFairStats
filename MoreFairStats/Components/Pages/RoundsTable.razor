@page "/rounds/{RoundNumber:int}/{LadderNumber:int?}"
@using Azure.Identity
@using Microsoft.Azure.Cosmos
@using MoreFairStats.Components
@inject MoreFairData moreFairData
@inject NavigationManager navMan

<PageTitle>Home</PageTitle>

<div class="input-group" style="width:30rem;">
    <span class="input-group-text border-warning" style="background-color:#10141f; color:#e7d5b3">View stats for round number</span>
    <select class="form-select form-control" onchange="location = this.value;">
        <option selected>Round</option>
        @for (int i = 1; i <= 300; i++)
        {
            <option value="/rounds/@i">@i</option>
        }
    </select>
    <a type="button" class="btn btn-outline-warning" href="/rounds/@(RoundNumber - 1)">&#8722;</a>
    <a type="button" class="btn btn-outline-warning" href="/rounds/@(RoundNumber + 1)">&#43;</a>
</div>

<br>

@if(roundStats != null)
{
    <div class="card border border-warning" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card-body">
            <h3 class="card-title">Stats for round @roundStats.Number</h3>
        </div>
    </div>
    <div class="card-group" style="width:50rem; background-color:#10141f; color:#e7d5b3">
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round info</div>
            <div class="card-body">
                <p>Base points: <b>@Int64.Parse(roundStats.BasePointsToPromote!).ToString("N0")</b></p>
                <p class="card-text">Round types: @string.Join(", ", roundStats.RoundTypes!)</p>
            </div>
        </div>
            <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round start</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.CreatedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
        <div class="card border-warning" style="background-color:#10141f; color:#e7d5b3">
            <div class="card-header border-warning">Round ending</div>
            <div class="card-body">
                <p class="card-text">Date: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[0]</p>
                <p class="card-text">Time: @roundStats.ClosedOn!.Substring(0, 19).Split('T')[1]</p>
            </div>
        </div>
    </div>
    <br>

    @if(ladderStats != null)
    {
        <RankersTable CurrentLadder="@LadderNumber" roundStats="@roundStats" ladderStats="@ladderStats"></RankersTable>
    }
}


@code{

    private async Task<int> getCurrentMaxRound()
    {
        return (await moreFairData.GetConfig()).CurrentMaxRound;
    }

    [Parameter]
    public int RoundNumber { get; set; }

    [Parameter]
    public int? LadderNumber { get; set; }

    private RoundStats? roundStats;

    private LadderStats? ladderStats;

    protected override async Task OnInitializedAsync()
    {
        var currentMaxRound = await getCurrentMaxRound();
        if (RoundNumber > currentMaxRound)
        {
            navMan.NavigateTo($"/rounds/{currentMaxRound}");
        }
        if (RoundNumber < 1)
        {
            navMan.NavigateTo("/rounds/1");
        }
        await updateRoundNumber();
        if (LadderNumber == null)
        {
            navMan.NavigateTo($"/rounds/{RoundNumber}/{roundStats!.NumberOfLadders}");
        }
        if (LadderNumber > roundStats!.NumberOfLadders)
        {
            navMan.NavigateTo($"/rounds/{RoundNumber}/{roundStats.NumberOfLadders}");
        }
        if (LadderNumber < 1)
        {
            navMan.NavigateTo($"/rounds/{RoundNumber}/1");
        }
        await updateLadderNumber(LadderNumber!.Value);
    }

    private async Task updateRoundNumber()
    {
        roundStats = await moreFairData.GetRound(RoundNumber);
    }

    private async Task updateLadderNumber(int ladderNum)
    {
        ladderStats = await parseLadderStats(RoundNumber, ladderNum);
        StateHasChanged();
    }

    internal async Task<LadderStats> parseLadderStats(int round, int ladder)
    {
        var ladderStats = await moreFairData.GetLadder(round, ladder);
        var queryString = $"SELECT * FROM c WHERE c.Round = {round} AND c.Ladder = {ladder}";
        var queryDef = new QueryDefinition(queryString);
        using var queryIter = moreFairData.GetLadderRankersQueryIterator(queryDef);
        var result = await queryIter.ReadNextAsync();
        var allIds = new List<string>();
        foreach (var ladderRanker in result)
        {
            var ranker = new Ranker()
            {
                AccountId = ladderRanker.AccountId,
                AutoPromote = ladderRanker.AutoPromote,
                Bias = ladderRanker.Bias,
                Grapes = ladderRanker.Grapes,
                Growing = ladderRanker.Growing,
                Multi = ladderRanker.Multi,
                Points = ladderRanker.Points,
                Power = ladderRanker.Power,
                Rank = ladderRanker.Rank,
                Vinegar = ladderRanker.Vinegar
            };
            ladderStats.Rankers!.Add(ranker);
            allIds.Add(ranker.AccountId.ToString());
        }
        var testPlayers = await moreFairData.GetManyPlayers(allIds);
        foreach (var player in testPlayers)
        {
            var ranker = ladderStats.Rankers!.Find(lr => lr.AccountId.ToString() == player.id)!;
            ranker.AssholePoints = player.AHPoints;
            ranker.UserName = player.UserName;
        }
        return ladderStats;
    }
}