

<h5 style="color:#e7d5b3">Select which ladder to show:</h5>

@for (int i = 0; i <= maxLadder / 50; i++)
{
<ul class="pagination" style="margin:0px">
    @for (int j = 1; j <= 50 && j + i * 50 <= maxLadder; j++)
    {
        var localVal = j + i * 50;
        <li class="page-item">
                <a type="button" class="btn btn-outline-warning" href="/rounds/@(RoundNumber)/@(localVal)" style="width:50px; background-color:@(localVal == CurrentLadder ? "#de9e41" : "#10141f"); color:@(localVal == CurrentLadder ? "#090a14" : "#e7d5b3")">
                    @localVal
                </a>
        </li>
    }
</ul>
}

<br>

<div class="card border-warning" style="width:35rem; background-color:#10141f; color:#e7d5b3">
    <div class="card-body">
        <h3 class="card-title">Stats for ladder @CurrentLadder</h3>
    </div>
</div>
<div class="card-group" style="width:35rem;">
    <div class="card border-warning" style="color: #e7d5b3; background-color:#10141f">
        <div class="card-header border-warning">Ladder info</div>
        <div class="card-body">
            <p>Base points: <b>@(AddSeparators(ladderStats!.BasePointsToPromote!))</b></p>
            <p class="card-text">Ladder types: @string.Join(", ", ladderStats.LadderTypes!)</p>
        </div>
    </div>
    <div class="card border-warning" style="color: #e7d5b3; background-color:#10141f">
        <div class="card-header border-warning">Ladder start</div>
        <div class="card-body">
            <p class="card-text">Date: @ladderStats.CreatedOn!.Substring(0, 19).Split('T')[0]</p>
            <p class="card-text">Time: @ladderStats.CreatedOn!.Substring(0, 19).Split('T')[1]</p>
        </div>
    </div>
</div>

<br>

<table class="table table-borderless">
    <thead>
        <tr>
            <th style="color: #e7d5b3; background-color: #10141f">Id</th>    <!--I really should figure out a better workaround, classes don't work for some reason, not even with !important-->
            <th style="color: #e7d5b3; background-color: #10141f">Name</th>
            <th style="color: #e7d5b3; background-color: #10141f">Rank</th>
            <th style="color: #e7d5b3; background-color: #10141f">Points</th>
            <th style="color: #e7d5b3; background-color: #10141f">Power</th>
            <th style="color: #e7d5b3; background-color: #10141f">Bias</th>
            <th style="color: #e7d5b3; background-color: #10141f">Multi</th>
            <th style="color: #e7d5b3; background-color: #10141f">Grapes</th>
            <th style="color: #e7d5b3; background-color: #10141f">Vinegar</th>
            <th style="color: #e7d5b3; background-color: #10141f">AutoPromote</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var ranker in ladderStats.Rankers!.OrderBy(lr => lr.Rank)!)       //Ironing out that weird DB scramble bug with an atrociously slow OrderBy. #Macgyver
    {                
        <tr class="@(ranker.Growing ? "" : "table-dark")">
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.AccountId</td>
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.UserName</td>
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.Rank</td>
            <td style="color: #e7d5b3; background-color: #10141f">@(AddSeparators(ranker.Points!))</td>
            <td style="color: #e7d5b3; background-color: #10141f">@(AddSeparators(ranker.Power!))</td>
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.Bias</td>
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.Multi</td>
            <td style="color: #e7d5b3; background-color: #10141f">@(AddSeparators(ranker.Grapes!))</td>
            <td style="color: #e7d5b3; background-color: #10141f">@(AddSeparators(ranker.Vinegar!))</td>
            <td style="color: #e7d5b3; background-color: #10141f">@ranker.AutoPromote</td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public RoundStats? roundStats { get; set; }

    public int maxLadder => roundStats!.NumberOfLadders;

    [Parameter]
    public LadderStats? ladderStats { get; set; }

    [Parameter]
    public int? CurrentLadder { get; set; }

    public int RoundNumber => roundStats!.Number;

    public string AddSeparators(string number)
    {
        return Int64.Parse(number).ToString("N0");
    }
}
