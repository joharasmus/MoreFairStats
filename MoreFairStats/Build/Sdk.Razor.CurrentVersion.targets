
<Project ToolsVersion="14.0">

  <PropertyGroup>
    <EnableDefaultContentItems Condition=" '$(EnableDefaultContentItems)' == '' ">true</EnableDefaultContentItems>
  </PropertyGroup>

  <!--
    This is a hook to import a set of targets before the Razor targets. By default this is unused.
  -->
  <Import Project="$(CustomBeforeRazorSdkTargets)" Condition="'$(CustomBeforeRazorSdkTargets)' != '' and Exists('$(CustomBeforeRazorSdkTargets)')"/>

  <PropertyGroup>
    <RazorSdkBuildTasksAssembly>.\Microsoft.NET.Sdk.Razor.Tasks.dll</RazorSdkBuildTasksAssembly>
    <_RazorSdkToolAssembly>.\rzc.dll</_RazorSdkToolAssembly>
  </PropertyGroup>

  <PropertyGroup Condition="'$(DOTNET_HOST_PATH)' == ''">
    <_RazorSdkDotNetHostDirectory>$(NetCoreRoot)</_RazorSdkDotNetHostDirectory>
    <_RazorSdkDotNetHostFileName>dotnet</_RazorSdkDotNetHostFileName>
    <_RazorSdkDotNetHostFileName Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</_RazorSdkDotNetHostFileName>
  </PropertyGroup>

  <PropertyGroup>
    <UseRazorSourceGenerator Condition="'$(UseRazorSourceGenerator)' == '' ">true</UseRazorSourceGenerator>
    <RazorLangVersion>8.0</RazorLangVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      The property IsRazorCompilerReferenced is defined by the 2.x Razor.Design package. We can use this as a best guess to determine if a project is targeting 2.x or earlier.
      This is useful to provide 3.0 or newer specific build warnings. However, since it's not very reliable, we should not use this to make build-altering decisions.
    -->
    <_IsTargetingRazor2X Condition="'$(IsRazorCompilerReferenced)'=='true'">true</_IsTargetingRazor2X>
  </PropertyGroup>

  <Import Project="Microsoft.NET.Sdk.Razor.Compilation.targets" Condition="'$(UseRazorSourceGenerator)' != 'true'"/>

  <PropertyGroup>
    <PrepareForRazorGenerateDependsOn>
      ResolveRazorGenerateInputs;
    </PrepareForRazorGenerateDependsOn>

    <PrepareForRazorGenerateDependsOn Condition="'$(UseRazorSourceGenerator)' != 'true'">
      $(PrepareForRazorGenerateDependsOn);
      ResolveTagHelperRazorGenerateInputs
    </PrepareForRazorGenerateDependsOn>

    <PrepareForRazorComponentGenerateDependsOn>
      ResolveRazorComponentInputs;
      AssignRazorComponentTargetPaths;
    </PrepareForRazorComponentGenerateDependsOn>

    <RazorGenerateDependsOn>
      PrepareForRazorGenerate;
    </RazorGenerateDependsOn>

    <RazorGenerateDependsOn Condition="'$(UseRazorSourceGenerator)' != 'true'">
      $(RazorGenerateDependsOn);
      RazorCoreGenerate
    </RazorGenerateDependsOn>
  </PropertyGroup>

  <!--
    Default values for properties that affect Razor targets to the standard build lifecycle.
  -->
  <PropertyGroup>
    <RazorCompileOnBuild>true</RazorCompileOnBuild>
    <RazorCompileOnPublish>true</RazorCompileOnPublish>
  </PropertyGroup>

  <!--
    Properties that configure Razor SDK, but need to be defined in targets due to evaluation order.
  -->
  <PropertyGroup>
    <!-- Output directory used for generated files -->
    <RazorGenerateIntermediateOutputPath Condition="'$(RazorGenerateIntermediateOutputPath)'==''">$(IntermediateOutputPath)Razor\</RazorGenerateIntermediateOutputPath>

    <_RazorComponentDeclarationOutputPath Condition="'$(_RazorComponentDeclarationOutputPath)'==''">$(IntermediateOutputPath)RazorDeclaration\</_RazorComponentDeclarationOutputPath>

    <!--
      Use the suffix .Views when producing compiled view assemblies. This matches the requirements for Mvc's ViewsFeatureProvider.
    -->
    <RazorTargetNameSuffix Condition="'$(RazorTargetNameSuffix)'==''">.Views</RazorTargetNameSuffix>

    <!-- Suffix appended to $(TargetName) to produce $(RazorTargetName), the name of the assembly produced by Razor -->
    <RazorTargetNameSuffix Condition="'$(RazorTargetNameSuffix)' == ''">.Razor</RazorTargetNameSuffix>

    <!-- File name (without extension) of the assembly produced by Razor -->
    <RazorTargetName Condition="'$(RazorTargetName)'==''">$(TargetName)$(RazorTargetNameSuffix)</RazorTargetName>

    <!--
      The compatibility zone - these properties were provided by the MVC Precompilation tool and they
      map to supported settings in Razor SDK.

      We want to set the defaults for these in the .props file, but we need to process the old settings here
      in case they were set in the project file. The consequence of this is that the old settings will override
      the new ones if they are set to conflicting values.
    -->
    <CopyRazorGenerateFilesToPublishDirectory Condition="'$(MvcRazorExcludeViewFilesFromPublish)'=='true'">false</CopyRazorGenerateFilesToPublishDirectory>
    <CopyRazorGenerateFilesToPublishDirectory Condition="'$(MvcRazorExcludeViewFilesFromPublish)'=='false'">true</CopyRazorGenerateFilesToPublishDirectory>

    <CopyRefAssembliesToPublishDirectory Condition="'$(MvcRazorExcludeRefAssembliesFromPublish)'=='true'">false</CopyRefAssembliesToPublishDirectory>
    <CopyRefAssembliesToPublishDirectory Condition="'$(MvcRazorExcludeRefAssembliesFromPublish)'=='false'">true</CopyRefAssembliesToPublishDirectory>

    <!-- Use PreserveCompilationReferences to determine the behavior of CopyRefAssembliesToPublishDirectory if not explicitly specified by the project. -->
    <CopyRefAssembliesToPublishDirectory Condition="'$(CopyRefAssembliesToPublishDirectory)'==''">$(PreserveCompilationReferences)</CopyRefAssembliesToPublishDirectory>

    <!-- For 2.x projects desktop and .NET Core projects, if they're opting in to runtime compilation (indicated by PreserveCompilationContext=true), set PreserveCompilationReferences = true -->
    <PreserveCompilationReferences Condition=" '$(PreserveCompilationContext)' == 'true' AND
      '$(TargetFrameworkIdentifier)' == '.NETFramework' ">true</PreserveCompilationReferences>

    <!--
      We can't set the actual default value here due to evaluation order (depends on $(OutDir)).

      This handles a compatibility case with MVC Precompilation.
    -->
    <RazorOutputPath Condition="'$(MvcRazorOutputPath)'!=''">$([MSBuild]::EnsureTrailingSlash('$(MvcRazorOutputPath)'))</RazorOutputPath>

    <!--
      Configures whether all of the @(RazorGenerate) items will be added as embedded files to the produced assembly.

      When true, everything in @(RazorGenerate) will be added to @(RazorEmbeddedFiles) and passed to CSC.
    -->
    <EmbedRazorGenerateSources Condition="'$(MvcRazorEmbedViewSources)'!=''">$(MvcRazorEmbedViewSources)</EmbedRazorGenerateSources>
    <EmbedRazorGenerateSources Condition="'$(EmbedRazorGenerateSources)'==''">false</EmbedRazorGenerateSources>

    <!--
    Set to false to disable Razor code generation from using a persistent build server process.
    -->
    <UseRazorBuildServer Condition="'$(UseRazorBuildServer)'==''">$(UseSharedCompilation)</UseRazorBuildServer>
    <UseRazorBuildServer Condition="'$(UseRazorBuildServer)'==''">true</UseRazorBuildServer>
  </PropertyGroup>

  <!--
    Resolve the toolset to use. This specifically applies to compilation with 2.x projects where compilation could be performed either using
    the PrecompilationTool (Microsoft.AspNetCore.Mvc.Razor.ViewCompilation) or the RazorSDK and we have to infer the tool that is to be used.
    In 3.0 or later, there is only the RazorSdk.
   -->
  <PropertyGroup>
    <ResolvedRazorCompileToolset>RazorSdk</ResolvedRazorCompileToolset>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RazorDefaultConfiguration)'==''">
	<RazorDefaultConfiguration>Default</RazorDefaultConfiguration>
  </PropertyGroup>

  <ItemGroup>
	<RazorConfiguration Include="Default" />
  </ItemGroup>

  <Import Project=".\Microsoft.NET.Sdk.Razor.CodeGeneration.targets" />

  <Import Project=".\Microsoft.NET.Sdk.Razor.Component.targets" Condition="'$(UseRazorSourceGenerator)' != 'true'" />

  <Import Project=".\Microsoft.NET.Sdk.Razor.SourceGenerators.targets" Condition="'$(UseRazorSourceGenerator)' == 'true'" />

  <PropertyGroup>
	<CoreCompileDependsOn>
		$(CoreCompileDependsOn);
		RazorGetAssemblyAttributes;
	</CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="PrepareForRazorGenerate" DependsOnTargets="$(PrepareForRazorGenerateDependsOn)">
  </Target>

  <Target Name="PrepareForRazorComponentGenerate" DependsOnTargets="$(PrepareForRazorComponentGenerateDependsOn)">
  </Target>

  <Target Name="RazorGenerate" DependsOnTargets="$(RazorGenerateDependsOn)">
  </Target>

  <Target Name="RazorCompile" DependsOnTargets="$(RazorCompileDependsOn)" Condition="'$(_UseSourceGenerators)' == ''">
  </Target>

  <!--
    Gets assembly attributes in support for Razor runtime code generation. This is a set of standard
    metadata attributes (defined in Microsoft.AspNetCore.Razor.Runtime) that capture the build-time
    Razor configuration of an application to be used at runtime.

    This allows the project file to act as the source of truth for the applicable Razor configuration regardless
    of how Razor is used.

    The SDK expects configurations that use runtime compilation to set $(GenerateRazorHostingAssemblyInfo) to true,
    it will be unset by default.
  -->

  <Target
    Name="RazorGetAssemblyAttributes"
    Condition="'$(GenerateRazorHostingAssemblyInfo)'=='true' and '$(RazorDefaultConfiguration)'!=''">
    <ItemGroup>
      <_RazorAssemblyAttribute Include="Microsoft.AspNetCore.Razor.Hosting.RazorLanguageVersionAttribute">
        <_Parameter1>$(RazorLangVersion)</_Parameter1>
      </_RazorAssemblyAttribute>
      <_RazorAssemblyAttribute Include="Microsoft.AspNetCore.Razor.Hosting.RazorConfigurationNameAttribute">
        <_Parameter1>$(RazorDefaultConfiguration)</_Parameter1>
      </_RazorAssemblyAttribute>
      <_RazorAssemblyAttribute Include="Microsoft.AspNetCore.Razor.Hosting.RazorExtensionAssemblyNameAttribute" Condition="'%(ResolvedRazorExtension.AssemblyName)'!=''">
        <_Parameter1>%(ResolvedRazorExtension.Identity)</_Parameter1>
        <_Parameter2>%(ResolvedRazorExtension.AssemblyName)</_Parameter2>
      </_RazorAssemblyAttribute>
    </ItemGroup>

  </Target>

  <!--
    Gathers input source files for code generation. This is a separate target so that we can avoid
    lots of work when there are no inputs for code generation.
    This target runs as part of PrepareForBuild. This gives us an opportunitity to change things like CopyToPublishDirectory
    for Content items before they are processed by other Build targets.

    NOTE: This target is called as part of an incremental build scenario in VS. Do not perform any work
    outside of calculating RazorGenerate items in this target.
  -->
  <Target Name="ResolveRazorGenerateInputs">
    <!--
      In MVC Precompilation MvcRazorFilesToCompile also had the effect of suppressing the default
      items for Razor code generation. As with all of these MVC Precompilation back-compat settings,
      using the old thing, overrides the new thing.
    -->
    <PropertyGroup Condition="'@(MvcRazorFilesToCompile)'!=''">
      <EnableDefaultRazorGenerateItems>false</EnableDefaultRazorGenerateItems>
    </PropertyGroup>
    <ItemGroup>
      <RazorGenerate Include="@(MvcRazorFilesToCompile)" />
    </ItemGroup>

    <ItemGroup Condition="'$(EnableDefaultRazorGenerateItems)'=='true'">
      <RazorGenerate
        Include="@(Content)"
        Exclude="$(_RazorComponentInclude)"
        Condition="'%(Content.Extension)'=='.cshtml'" />
    </ItemGroup>

    <!--
      Ideally we want to able to update all Content items that also appear in RazorGenerate to have
      CopyToPublishDirectory=Never. However, there isn't a simple way to do this (https://github.com/Microsoft/msbuild/issues/1618).
      Instead, we'll update all cshtml Content items when EnableDefaultRazorGenerateItems=true and Razor Sdk is used for publishing.
    -->
    <ItemGroup Condition="
      '$(EnableDefaultRazorGenerateItems)'=='true' and
      '$(CopyRazorGenerateFilesToPublishDirectory)'=='false' and
      '$(ResolvedRazorCompileToolset)'=='RazorSdk' and
      '$(RazorCompileOnPublish)'=='true'">

      <Content Condition="'%(Content.Extension)'=='.cshtml'" CopyToPublishDirectory="Never" />
    </ItemGroup>

    <ItemGroup Condition="
      '$(ResolvedRazorCompileToolset)'=='RazorSdk' and
      '$(EnableDefaultRazorGenerateItems)'=='true'">

      <Content Condition="'%(Content.Extension)'=='.cshtml'" Pack="$(IncludeRazorContentInPack)" />
      <Content Condition="'%(Content.Extension)'=='.razor'" Pack="$(IncludeRazorContentInPack)" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveRazorComponentInputs">
    <!--
    Gathers input source files for Razor component generation. This is a separate target so that we can avoid
    lots of work when there are no inputs for code generation.

    NOTE: This target is called as part of an incremental build scenario in VS. Do not perform any work
    outside of calculating RazorComponent items in this target.
    -->

    <ItemGroup Condition="'$(EnableDefaultRazorComponentItems)'=='true'">
      <RazorComponent Include="@(Content)" Condition="'%(Content.Extension)'=='.razor'" />
      <RazorComponent Include="$(_RazorComponentInclude)" />
    </ItemGroup>

    <ItemGroup>
      <Content Condition="'%(Content.Extension)'=='.razor'" CopyToPublishDirectory="Never" />
    </ItemGroup>
  </Target>

  <Target Name="AssignRazorComponentTargetPaths" Condition="'@(RazorComponent)' != ''">
    <AssignTargetPath Files="@(RazorComponent)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="RazorComponentWithTargetPath" />
    </AssignTargetPath>

    <ItemGroup>
      <RazorComponentWithTargetPath Condition="'%(RazorComponentWithTargetPath.GeneratedOutput)' == ''">
        <GeneratedOutput>$(RazorGenerateIntermediateOutputPath)%(RazorComponentWithTargetPath.TargetPath)$(RazorGenerateOutputFileExtension)</GeneratedOutput>
      </RazorComponentWithTargetPath>

      <RazorComponentWithTargetPath Condition="'%(RazorComponentWithTargetPath.GeneratedDeclaration)' == ''">
        <GeneratedDeclaration>$(_RazorComponentDeclarationOutputPath)%(RazorComponentWithTargetPath.TargetPath)$(RazorGenerateOutputFileExtension)</GeneratedDeclaration>
      </RazorComponentWithTargetPath>

      <RazorComponentWithTargetPath Condition="'%(RazorComponentWithTargetPath.DocumentKind)' == ''">
        <DocumentKind>component</DocumentKind>
      </RazorComponentWithTargetPath>
    </ItemGroup>
  </Target>

  <Import Project=".\Microsoft.NET.Sdk.Razor.DesignTime.targets" />

</Project>
